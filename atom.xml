<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tao-Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wutao.work/"/>
  <updated>2018-12-26T07:50:51.388Z</updated>
  <id>http://wutao.work/</id>
  
  <author>
    <name>Tao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="http://wutao.work/2018/12/26/test/"/>
    <id>http://wutao.work/2018/12/26/test/</id>
    <published>2018-12-26T07:50:51.000Z</published>
    <updated>2018-12-26T07:50:51.388Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue去哪儿</title>
    <link href="http://wutao.work/2018/11/23/vue%E5%8E%BB%E5%93%AA%E5%84%BF/"/>
    <id>http://wutao.work/2018/11/23/vue去哪儿/</id>
    <published>2018-11-23T15:11:24.000Z</published>
    <updated>2018-11-24T09:21:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h2><h3 id="建立文件夹"><a href="#建立文件夹" class="headerlink" title="建立文件夹"></a>建立文件夹</h3><p>在电脑合适的位置建立文件夹 <code>mkdir travel</code></p><h3 id="使用-vue-cli-生成项目目录结构"><a href="#使用-vue-cli-生成项目目录结构" class="headerlink" title="使用 vue-cli 生成项目目录结构"></a>使用 vue-cli 生成项目目录结构</h3><p>1 检测 node，终端输入 <code>node -v</code><br>2 全局安装 vue-cli，在终端输入 <code>npm install vue-cli -g</code><br>3 终端输入 <code>vue init webpack</code></p><h3 id="启动环境"><a href="#启动环境" class="headerlink" title="启动环境"></a>启动环境</h3><p>终端执行<code>npm run dev</code>,然后在浏览器输入<code>http://localhost:8080</code> 进行测试</p><h2 id="引入库"><a href="#引入库" class="headerlink" title="引入库"></a>引入库</h2><h3 id="移动端-meta-标签修改"><a href="#移动端-meta-标签修改" class="headerlink" title="移动端 meta 标签修改"></a>移动端 meta 标签修改</h3><p>将<code>index.html</code>的 meta 改成<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;&gt;</code></p><h3 id="移动端-reset-css-引入"><a href="#移动端-reset-css-引入" class="headerlink" title="移动端 reset.css 引入"></a>移动端 reset.css 引入</h3><p>在<code>src/assets</code>新建一个文件夹 <code>styles</code>,将 reset.css 放到该文件夹中，然后在 main.js <code>import &#39;styles/reset.css&#39;</code>，这里注意可以在 build/webpack.base.conf.js 配置 alias <code>&#39;styles&#39;: resolve(&#39;src/assets/styles&#39;)</code> ，方便以后引入 style 文件夹的文件</p><h3 id="引入-iconfont"><a href="#引入-iconfont" class="headerlink" title="引入 iconfont"></a>引入 iconfont</h3><p>在<code>src/assets/styles</code>新建 iconfont 文件夹，将’iconfont.eot,新建 iconfont 文件夹，将’iconfont.svg,iconfont.ttf,iconfont.woff‘放入其中，iconfont.css 放入<code>src/assets/styles</code>下，记得修改 iconfont.css 内容的路径。然后在 main.js<code>mport &#39;styles/iconfont.css&#39;</code></p><h3 id="移动端-300ms"><a href="#移动端-300ms" class="headerlink" title="移动端 300ms"></a>移动端 300ms</h3><p>控制台执行<code>npm install fastclick -S</code>之后，在 main.js 中引入，并绑定到 body</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import FastClick from &apos;fastclick&apos;</span><br><span class="line">FastClick.attach(document.body)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境的搭建&quot;&gt;&lt;a href=&quot;#环境的搭建&quot; class=&quot;headerlink&quot; title=&quot;环境的搭建&quot;&gt;&lt;/a&gt;环境的搭建&lt;/h2&gt;&lt;h3 id=&quot;建立文件夹&quot;&gt;&lt;a href=&quot;#建立文件夹&quot; class=&quot;headerlink&quot; title=&quot;建立文
      
    
    </summary>
    
      <category term="Vue" scheme="http://wutao.work/categories/Vue/"/>
    
    
      <category term="vue项目实战" scheme="http://wutao.work/tags/vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>you need to konw css</title>
    <link href="http://wutao.work/2018/11/20/you-need-to-konw-css/"/>
    <id>http://wutao.work/2018/11/20/you-need-to-konw-css/</id>
    <published>2018-11-20T02:40:16.000Z</published>
    <updated>2018-11-20T08:16:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="边框与背景"><a href="#边框与背景" class="headerlink" title="边框与背景"></a>边框与背景</h2><h3 id="边框内圆角"><a href="#边框内圆角" class="headerlink" title="边框内圆角"></a>边框内圆角</h3><iframe width="100%" height="300" src="//jsfiddle.net/Wt19930325/tvx0urem/28/embedded/html,css,result/" allowfullscreen="allowfullscreen" allowpaymentrequest="" frameborder="0"></iframe><h3 id="条纹背景"><a href="#条纹背景" class="headerlink" title="条纹背景"></a>条纹背景</h3><p>1.进度条</p><iframe width="100%" height="300" src="//jsfiddle.net/Wt19930325/cLhjup7a/77/embedded/html,css,result/" allowfullscreen="allowfullscreen" allowpaymentrequest="" frameborder="0"></iframe><br>2.不规则卡片<br><iframe width="100%" height="300" src="//jsfiddle.net/Wt19930325/cLhjup7a/114/embedded/html,css,result/" allowfullscreen="allowfullscreen" allowpaymentrequest="" frameborder="0"></iframe><h2 id="常见形状"><a href="#常见形状" class="headerlink" title="常见形状"></a>常见形状</h2><h3 id="圆与椭圆"><a href="#圆与椭圆" class="headerlink" title="圆与椭圆"></a>圆与椭圆</h3><iframe width="100%" height="300" src="//jsfiddle.net/Wt19930325/cLhjup7a/209/embedded/html,css,result/" allowfullscreen="allowfullscreen" allowpaymentrequest="" frameborder="0"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;边框与背景&quot;&gt;&lt;a href=&quot;#边框与背景&quot; class=&quot;headerlink&quot; title=&quot;边框与背景&quot;&gt;&lt;/a&gt;边框与背景&lt;/h2&gt;&lt;h3 id=&quot;边框内圆角&quot;&gt;&lt;a href=&quot;#边框内圆角&quot; class=&quot;headerlink&quot; title=&quot;边框内
      
    
    </summary>
    
      <category term="笔记" scheme="http://wutao.work/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="css" scheme="http://wutao.work/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Vscode+Eslint+Prettier写Vue项目</title>
    <link href="http://wutao.work/2018/11/15/Vscode-Eslint-Prettier%E5%86%99Vue%E9%A1%B9%E7%9B%AE/"/>
    <id>http://wutao.work/2018/11/15/Vscode-Eslint-Prettier写Vue项目/</id>
    <published>2018-11-15T09:54:26.000Z</published>
    <updated>2018-11-20T02:38:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-Vscode-和插件"><a href="#安装-Vscode-和插件" class="headerlink" title="安装 Vscode 和插件"></a>安装 Vscode 和插件</h2><p>首先安装<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Vscode 官网</a>下载安装包，安装好了之后启动，然后<code>ctrl+shift+X</code>,安装以下插件</p><p><ol><br>    <li>Vetur</li><br>    <li>ESLint</li><br>    <li>Prettier - Code formatter</li><br></ol><br>安装完之后最好是重启下VS Code避免插件不生效的问题。</p><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><p>按<code>ctrl+,</code>,打开设置界面，设置 settings.json 文件，配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">    &quot;eslint.autoFixOnSave&quot;: true,</span><br><span class="line">    //保存时eslint自动修复错误</span><br><span class="line">    &quot;eslint.validate&quot;: [</span><br><span class="line">        &quot;javascript&quot;,</span><br><span class="line">        &quot;javascriptreact&quot;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;language&quot;: &quot;vue&quot;,</span><br><span class="line">            &quot;autoFix&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;vetur.format.defaultFormatter.html&quot;: &quot;js-beautify-html&quot;,</span><br><span class="line">    &quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;,</span><br><span class="line">    &quot;vetur.format.defaultFormatterOptions&quot;: &#123;</span><br><span class="line">        &quot;js-beautify-html&quot;: &#123;</span><br><span class="line">            &quot;wrap_attributes&quot;: &quot;force-aligned&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;prettier.eslintIntegration&quot;: true,</span><br><span class="line">    &quot;prettier.singleQuote&quot;: true,</span><br><span class="line">    &quot;prettier.semi&quot;: false,</span><br><span class="line">    &quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以愉快的编码了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-Vscode-和插件&quot;&gt;&lt;a href=&quot;#安装-Vscode-和插件&quot; class=&quot;headerlink&quot; title=&quot;安装 Vscode 和插件&quot;&gt;&lt;/a&gt;安装 Vscode 和插件&lt;/h2&gt;&lt;p&gt;首先安装&lt;a href=&quot;https://code.
      
    
    </summary>
    
      <category term="Vue" scheme="http://wutao.work/categories/Vue/"/>
    
    
      <category term="前端编辑器" scheme="http://wutao.work/tags/%E5%89%8D%E7%AB%AF%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>charles使用</title>
    <link href="http://wutao.work/2018/11/08/charles%E4%BD%BF%E7%94%A8/"/>
    <id>http://wutao.work/2018/11/08/charles使用/</id>
    <published>2018-11-08T03:29:48.000Z</published>
    <updated>2018-12-26T08:06:50.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载-charles-工具"><a href="#下载-charles-工具" class="headerlink" title="下载 charles 工具"></a>下载 charles 工具</h2><p>charles 破解版 链接:<a href="https://pan.baidu.com/s/1ps9VZC495UQKLjxPrsSU7w" target="_blank" rel="noopener">https://pan.baidu.com/s/1ps9VZC495UQKLjxPrsSU7w</a> 密码:uqfo</p><a id="more"></a><h2 id="注册激活码"><a href="#注册激活码" class="headerlink" title="注册激活码"></a>注册激活码</h2><p>Registered Name: <a href="https://zhile.io" target="_blank" rel="noopener">https://zhile.io</a><br>License Key: 48891cf209c6d32bf4</p><h2 id="电脑安装证书"><a href="#电脑安装证书" class="headerlink" title="电脑安装证书"></a>电脑安装证书</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Help =&gt; SSL Proxying =&gt; Install Charles Root Certificate</span><br></pre></td></tr></table></figure><p>之后会弹出钥匙串，如果不弹出，请自行打开钥匙串.<br>系统默认是不信任 Charles 的证书的，此时对证书右键，在弹出的下拉菜单中选择『显示简介』，点击使用此证书时，把使用系统默认改为始终信任</p><h2 id="手机设备安装证书"><a href="#手机设备安装证书" class="headerlink" title="手机设备安装证书"></a>手机设备安装证书</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Help =&gt; SSL Proxying =&gt; Install Charles Root Certificate On a Mobile Device</span><br></pre></td></tr></table></figure><p>进入手机设置界面<br>设置服务器代理<br>ip 为你本机的 ip，端口 8888<br>然后打开手机的浏览器，输入<br>charlesproxy.com/getssl<br>安装证书</p><h2 id="使用-SSL-代理"><a href="#使用-SSL-代理" class="headerlink" title="使用 SSL 代理"></a>使用 SSL 代理</h2><p>右击链接 =&gt; Enable SSL Proxying</p><h2 id="操作之后依旧无法抓取-https-包，显示-unknown？"><a href="#操作之后依旧无法抓取-https-包，显示-unknown？" class="headerlink" title="操作之后依旧无法抓取 https 包，显示 unknown？"></a>操作之后依旧无法抓取 https 包，显示 unknown？</h2><p>设置 =&gt; 关于本机 =&gt; 证书信任设置 =&gt; 勾选「针对根证书启用完全信任」</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载-charles-工具&quot;&gt;&lt;a href=&quot;#下载-charles-工具&quot; class=&quot;headerlink&quot; title=&quot;下载 charles 工具&quot;&gt;&lt;/a&gt;下载 charles 工具&lt;/h2&gt;&lt;p&gt;charles 破解版 链接:&lt;a href=&quot;https://pan.baidu.com/s/1ps9VZC495UQKLjxPrsSU7w&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1ps9VZC495UQKLjxPrsSU7w&lt;/a&gt; 密码:uqfo&lt;/p&gt;
    
    </summary>
    
      <category term="前端调试工具" scheme="http://wutao.work/categories/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="debug" scheme="http://wutao.work/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>koa2学习</title>
    <link href="http://wutao.work/2018/11/03/koa2%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wutao.work/2018/11/03/koa2学习/</id>
    <published>2018-11-03T14:29:08.000Z</published>
    <updated>2018-11-06T06:54:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>新建一个文件夹如koa2文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd koa2</span><br><span class="line">npm init -y</span><br><span class="line">npm install --save koa</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>在文件夹新建一个app.js,输入以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;)</span><br><span class="line">connst app = new Koa()</span><br><span class="line">app.use( async ( ctx ) =&gt; &#123;</span><br><span class="line">  ctx.body = &apos;hello koa2&apos;</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(3000)</span><br><span class="line">console.log(&apos;[demo] start-quick is starting at port 3000&apos;)</span><br></pre></td></tr></table></figure></p><p>然后在命令行输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure></p><p>或者执行npm start,npm start命令会让npm执行定义在package.json文件中的start对应命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;node app.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Get请求的接收"><a href="#Get请求的接收" class="headerlink" title="Get请求的接收"></a>Get请求的接收</h2><h3 id="query和querystring区别"><a href="#query和querystring区别" class="headerlink" title="query和querystring区别"></a>query和querystring区别</h3><p>在koa2中GET请求通过request接收，但是接受的方法有两种：query和querystring。<br>1.query：返回的是格式化好的参数对象。<br>2.querystring：返回的是请求字符串。<br>看如下例子的输出结果<br>demo01.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line">app.use(async(ctx)=&gt;&#123;</span><br><span class="line">    let url =ctx.url;</span><br><span class="line">    let request =ctx.request;</span><br><span class="line">    let req_query = request.query;</span><br><span class="line">    let req_querystring = request.querystring;</span><br><span class="line">    ctx.body=&#123;</span><br><span class="line">        url,</span><br><span class="line">        req_query,</span><br><span class="line">        req_querystring</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;[demo] server is starting at port 3000&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>编写好后，在终端中使用node demo1.js启动服务。启动一切正常可在浏览器中使用<a href="http://127.0.0.1:3000?user=wutao&amp;age=18" target="_blank" rel="noopener">http://127.0.0.1:3000?user=wutao&amp;age=18</a> 来进行访问。我们在网页中可以得到一串JSON字符串.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;url&quot;:&quot;/?user=wutao&amp;age=18&quot;,&quot;req_query&quot;:&#123;&quot;user&quot;:&quot;wutao&quot;,&quot;age&quot;:&quot;18&quot;&#125;,&quot;req_querystring&quot;:&quot;user=wutao&amp;age=18&quot;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="直接从ctx中获取Get请求"><a href="#直接从ctx中获取Get请求" class="headerlink" title="直接从ctx中获取Get请求"></a>直接从ctx中获取Get请求</h3><p>demo02.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line">app.use(async(ctx)=&gt;&#123;</span><br><span class="line">    let url =ctx.url;</span><br><span class="line">    //从request中获取GET请求</span><br><span class="line">    let request =ctx.request;</span><br><span class="line">    let req_query = request.query;</span><br><span class="line">    let req_querystring = request.querystring;</span><br><span class="line">    //从上下文中直接获取</span><br><span class="line">    let ctx_query = ctx.query;</span><br><span class="line">    let ctx_querystring = ctx.querystring;</span><br><span class="line">    ctx.body=&#123;</span><br><span class="line">        url,</span><br><span class="line">        req_query,</span><br><span class="line">        req_querystring,</span><br><span class="line">        ctx_query,</span><br><span class="line">        ctx_querystring</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;[demo] server is starting at port 3000&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>编写好后，在终端中使用node demo1.js启动服务。启动一切正常可在浏览器中使用<a href="http://127.0.0.1:3000?user=wutao&amp;age=18" target="_blank" rel="noopener">http://127.0.0.1:3000?user=wutao&amp;age=18</a> 来进行访问。我们在网页中可以得到一串JSON字符串.</p><h2 id="post请求接收"><a href="#post请求接收" class="headerlink" title="post请求接收"></a>post请求接收</h2><h3 id="获取Post请求的步骤："><a href="#获取Post请求的步骤：" class="headerlink" title="获取Post请求的步骤："></a>获取Post请求的步骤：</h3><p>1.解析上下文ctx中的原生nodex.js对象req。<br>2.将POST表单数据解析成query string-字符串.(例如:user=wutao&amp;age=18)<br>3.将字符串转换成JSON格式。</p><h3 id="ctx-method-得到请求类型"><a href="#ctx-method-得到请求类型" class="headerlink" title="ctx.method 得到请求类型"></a>ctx.method 得到请求类型</h3><p>demo03.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line">app.use(async(ctx) =&gt; &#123;</span><br><span class="line">     //当请求时GET请求时，显示表单让用户填写</span><br><span class="line">     if(ctx.url === &apos;/&apos; &amp;&amp; ctx.method === &apos;GET&apos;)&#123;</span><br><span class="line">         let html =`</span><br><span class="line">            &lt;h1&gt;Koa2 request post demo&lt;/h1&gt;</span><br><span class="line">            &lt;form method=&quot;POST&quot;  action=&quot;/&quot;&gt;</span><br><span class="line">                &lt;p&gt;userName&lt;/p&gt;</span><br><span class="line">                &lt;input name=&quot;userName&quot; /&gt; &lt;br/&gt;</span><br><span class="line">                &lt;p&gt;age&lt;/p&gt;</span><br><span class="line">                &lt;input name=&quot;age&quot; /&gt; &lt;br/&gt;</span><br><span class="line">                &lt;p&gt;webSite&lt;/p&gt;</span><br><span class="line">                &lt;input name=&apos;webSite&apos; /&gt;&lt;br/&gt;</span><br><span class="line">                &lt;button type=&quot;submit&quot;&gt;submit&lt;/button&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        `;</span><br><span class="line">        ctx.body = html;</span><br><span class="line">     &#125;else if(ctx.url === &apos;/&apos; &amp;&amp; ctx.method === &apos;POST&apos;)&#123;</span><br><span class="line">         ctx.body = &apos;接受数据了&apos;</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">         //其它请求显示404页面</span><br><span class="line">        ctx.body=&apos;&lt;h1&gt;404!&lt;/h1&gt;&apos;;</span><br><span class="line">     &#125;</span><br><span class="line">&#125; )</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;[demo] server is starting at port 3000&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="解析Node原生POST参数"><a href="#解析Node原生POST参数" class="headerlink" title="解析Node原生POST参数"></a>解析Node原生POST参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function parsePostData(ctx)&#123;</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            let postdata=&quot;&quot;;</span><br><span class="line">            ctx.req.on(&apos;data&apos;,(data)=&gt;&#123;</span><br><span class="line">                postdata += data</span><br><span class="line">            &#125;)</span><br><span class="line">            ctx.req.addListener(&quot;end&quot;,function()&#123;</span><br><span class="line">                resolve(postdata);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;catch(error)&#123;</span><br><span class="line">            reject(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在上demo03.js接收POST请求的处理方法里，修改代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">else if(ctx.url===&apos;/&apos; &amp;&amp; ctx.method===&apos;POST&apos;)&#123;</span><br><span class="line">    let pastData=await parsePostData(ctx);</span><br><span class="line">    ctx.body=pastData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="POST字符串解析JSON对象"><a href="#POST字符串解析JSON对象" class="headerlink" title="POST字符串解析JSON对象"></a>POST字符串解析JSON对象</h3><p>上面得到的post参数是一个字符串，接下来将这个字符串封装成json对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function parseQueryStr(queryStr)&#123;</span><br><span class="line">    let queryData=&#123;&#125;;</span><br><span class="line">    let queryStrList = queryStr.split(&apos;&amp;&apos;);</span><br><span class="line">    for( let [index,queryStr] of queryStrList.entries() )&#123;</span><br><span class="line">        let itemList = queryStr.split(&apos;=&apos;);</span><br><span class="line">        console.log(itemList);</span><br><span class="line">        queryData[itemList[0]] = decodeURIComponent(itemList[1]);</span><br><span class="line">    &#125; </span><br><span class="line">    return queryData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将demo03.js的 parsePostData做些修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function parsePostData(ctx)&#123;</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            let postdata=&quot;&quot;;</span><br><span class="line">            ctx.req.on(&apos;data&apos;,(data)=&gt;&#123;</span><br><span class="line">                postdata += data</span><br><span class="line">            &#125;)</span><br><span class="line">            ctx.req.addListener(&quot;end&quot;,function()&#123;</span><br><span class="line">                let parseData = parseQueryStr( postdata )</span><br><span class="line">                resolve(parseData);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;catch(error)&#123;</span><br><span class="line">            reject(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="koa-bodyparser中间件"><a href="#koa-bodyparser中间件" class="headerlink" title="koa-bodyparser中间件"></a>koa-bodyparser中间件</h2><p>koa-bodyparser中间件可以把koa2上下文的formData数据解析到ctx.request.body中。</p><h3 id="安装中间价"><a href="#安装中间价" class="headerlink" title="安装中间价"></a>安装中间价</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save koa-bodyparser@3</span><br></pre></td></tr></table></figure><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>安装完成后，需要在代码中引入并使用。我们在代码顶部用require进行引入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const bodyParser = require(&apos;koa-bodyparser&apos;);</span><br></pre></td></tr></table></figure></p><p>然后进行使用，如果不使用是没办法调用的，使用代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(bodyParser());</span><br></pre></td></tr></table></figure></p><p>demo04.js代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">const Koa  = require(&apos;koa&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line">const bodyParser = require(&apos;koa-bodyparser&apos;);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line">app.use(async(ctx)=&gt;&#123;</span><br><span class="line">    if(ctx.url===&apos;/&apos; &amp;&amp; ctx.method===&apos;GET&apos;)&#123;</span><br><span class="line">        //显示表单页面</span><br><span class="line">        let html=`</span><br><span class="line">            &lt;h1&gt;wutao Koa2 request POST&lt;/h1&gt;</span><br><span class="line">            &lt;form method=&quot;POST&quot; action=&quot;/&quot;&gt;</span><br><span class="line">                &lt;p&gt;userName&lt;/p&gt;</span><br><span class="line">                &lt;input name=&quot;userName&quot; /&gt;&lt;br/&gt;</span><br><span class="line">                &lt;p&gt;age&lt;/p&gt;</span><br><span class="line">                &lt;input name=&quot;age&quot; /&gt;&lt;br/&gt;</span><br><span class="line">                &lt;p&gt;website&lt;/p&gt;</span><br><span class="line">                &lt;input name=&quot;webSite&quot; /&gt;&lt;br/&gt;</span><br><span class="line">                &lt;button type=&quot;submit&quot;&gt;submit&lt;/button&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        `;</span><br><span class="line">        ctx.body=html;</span><br><span class="line">    &#125;else if(ctx.url===&apos;/&apos; &amp;&amp; ctx.method===&apos;POST&apos;)&#123;</span><br><span class="line">         let postData= ctx.request.body;</span><br><span class="line">         ctx.body=postData;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        ctx.body=&apos;&lt;h1&gt;404!&lt;/h1&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;[demo] server is starting at port 3000&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="Koa-router中间件"><a href="#Koa-router中间件" class="headerlink" title="Koa-router中间件"></a>Koa-router中间件</h2><h3 id="安装koa-router中间件"><a href="#安装koa-router中间件" class="headerlink" title="安装koa-router中间件"></a>安装koa-router中间件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save koa-router</span><br></pre></td></tr></table></figure><h3 id="demo案例"><a href="#demo案例" class="headerlink" title="demo案例"></a>demo案例</h3><p>demo05.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;);</span><br><span class="line">const Router = require(&apos;koa-router&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line">const router = new Router();</span><br><span class="line">router.get(&apos;/&apos;, function (ctx, next) &#123;</span><br><span class="line">    ctx.body=&quot;Hello wutao&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods());</span><br><span class="line">  app.listen(3000,()=&gt;&#123;</span><br><span class="line">      console.log(&apos;starting at port 3000&apos;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="多页面配置"><a href="#多页面配置" class="headerlink" title="多页面配置"></a>多页面配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;);</span><br><span class="line">const Router = require(&apos;koa-router&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line">const router = new Router();</span><br><span class="line">router.get(&apos;/&apos;, function (ctx, next) &#123;</span><br><span class="line">    ctx.body=&quot;Hello wutao&quot;;</span><br><span class="line">&#125;)</span><br><span class="line">.get(&apos;/todo&apos;,(ctx,next)=&gt;&#123;</span><br><span class="line">    ctx.body=&quot;Todo page&quot;</span><br><span class="line">&#125;);</span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods());</span><br><span class="line">  app.listen(3000,()=&gt;&#123;</span><br><span class="line">      console.log(&apos;starting at port 3000&apos;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="koa2使用cookie"><a href="#koa2使用cookie" class="headerlink" title="koa2使用cookie"></a>koa2使用cookie</h2><p>1.ctx.cookies.get(name,[optins]):读取上下文请求中的cookie。<br>2.ctx.cookies.set(name,value,[options])：在上下文中写入cookie</p><h3 id="写入Cookie操作"><a href="#写入Cookie操作" class="headerlink" title="写入Cookie操作"></a>写入Cookie操作</h3><p>demo06.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const Koa  = require(&apos;koa&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line">app.use(async(ctx)=&gt;&#123;</span><br><span class="line">    if(ctx.url=== &apos;/index&apos;)&#123;</span><br><span class="line">        ctx.cookies.set(</span><br><span class="line">            &apos;MyName&apos;,&apos;wutao&apos;</span><br><span class="line">        );</span><br><span class="line">        ctx.body = &apos;cookie is ok&apos;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        ctx.body = &apos;hello world&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;[demo] server is starting at port 3000&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>写好后预览，打开F12可以在Application中找到Cookies选项。就可以找到我们写入的name和value了。</p><h3 id="Cookie选项"><a href="#Cookie选项" class="headerlink" title="Cookie选项"></a>Cookie选项</h3><p>domain：写入cookie所在的域名<br>path：写入cookie所在的路径<br>maxAge：Cookie最大有效时长<br>expires：cookie失效时间<br>httpOnly:是否只用http请求中获得<br>overwirte：是否允许重写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const Koa  = require(&apos;koa&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line">app.use(async(ctx)=&gt;&#123;</span><br><span class="line">    if(ctx.url=== &apos;/index&apos;)&#123;</span><br><span class="line">        ctx.cookies.set(</span><br><span class="line">            &apos;MyName&apos;,&apos;wutao&apos;,&#123;</span><br><span class="line">                domain:&apos;127.0.0.1&apos;, // 写cookie所在的域名</span><br><span class="line">                path:&apos;/index&apos;,       // 写cookie所在的路径</span><br><span class="line">                maxAge:1000*60*60*24,   // cookie有效时长</span><br><span class="line">                expires:new Date(&apos;2018-12-31&apos;), // cookie失效时间</span><br><span class="line">                httpOnly:false,  // 是否只用于http请求中获取</span><br><span class="line">                overwrite:false  // 是否允许重写</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        ctx.body = &apos;cookie is ok&apos;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        ctx.body = &apos;hello world&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;[demo] server is starting at port 3000&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="读取Cookie："><a href="#读取Cookie：" class="headerlink" title="读取Cookie："></a>读取Cookie：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const Koa  = require(&apos;koa&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line">app.use(async(ctx)=&gt;&#123;</span><br><span class="line">    if(ctx.url=== &apos;/index&apos;)&#123;</span><br><span class="line">        ctx.cookies.set(</span><br><span class="line">            &apos;MyName&apos;,&apos;wutao&apos;,&#123;</span><br><span class="line">                domain:&apos;127.0.0.1&apos;, // 写cookie所在的域名</span><br><span class="line">                path:&apos;/index&apos;,       // 写cookie所在的路径</span><br><span class="line">                maxAge:1000*60*60*24,   // cookie有效时长</span><br><span class="line">                expires:new Date(&apos;2018-12-31&apos;), // cookie失效时间</span><br><span class="line">                httpOnly:false,  // 是否只用于http请求中获取</span><br><span class="line">                overwrite:false  // 是否允许重写</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        ctx.body = &apos;cookie is ok&apos;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if( ctx.cookies.get(&apos;MyName&apos;))&#123;</span><br><span class="line">            ctx.body = ctx.cookies.get(&apos;MyName&apos;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            ctx.body = &apos;Cookie is none&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;[demo] server is starting at port 3000&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Koa2的模板（ejs"><a href="#Koa2的模板（ejs" class="headerlink" title="Koa2的模板（ejs)"></a>Koa2的模板（ejs)</h2><h3 id="安装中间件"><a href="#安装中间件" class="headerlink" title="安装中间件"></a>安装中间件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save koa-views</span><br><span class="line">npm install --save ejs</span><br></pre></td></tr></table></figure><h3 id="编写ejs"><a href="#编写ejs" class="headerlink" title="编写ejs"></a>编写ejs</h3><p>新建一个view的文件夹，并在它下面新建index.ejs文件。<br>views/index.ejs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;http://wutao.com/wp-admin/post.php?post=2760&amp;action=edit#</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;EJS Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="编写koa文件"><a href="#编写koa文件" class="headerlink" title="编写koa文件"></a>编写koa文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;)</span><br><span class="line">const views = require(&apos;koa-views&apos;)</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const app = new Koa()</span><br><span class="line">// 加载模板引擎</span><br><span class="line">app.use(views(path.join(__dirname, &apos;./view&apos;), &#123;</span><br><span class="line">  extension: &apos;ejs&apos;</span><br><span class="line">&#125;))</span><br><span class="line">app.use( async ( ctx ) =&gt; &#123;</span><br><span class="line">  let title = &apos;hello koa2&apos;</span><br><span class="line">  await ctx.render(&apos;index&apos;, &#123;</span><br><span class="line">    title</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(3000,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;[demo] server is starting at port 3000&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="koa-static静态资源中间件"><a href="#koa-static静态资源中间件" class="headerlink" title="koa-static静态资源中间件"></a>koa-static静态资源中间件</h2><h3 id="安装koa-static"><a href="#安装koa-static" class="headerlink" title="安装koa-static"></a>安装koa-static</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save koa-static</span><br></pre></td></tr></table></figure><h3 id="新建static文件夹-然后在static文件中放入图片，css和js文件"><a href="#新建static文件夹-然后在static文件中放入图片，css和js文件" class="headerlink" title="新建static文件夹 然后在static文件中放入图片，css和js文件"></a>新建static文件夹 然后在static文件中放入图片，css和js文件</h3><p>demlo06.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;)</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const static = require(&apos;koa-static&apos;)</span><br><span class="line">const app = new Koa()</span><br><span class="line">const staticPath = &apos;./static&apos;</span><br><span class="line">app.use(static(</span><br><span class="line">  path.join( __dirname,  staticPath)</span><br><span class="line">))</span><br><span class="line">app.use( async ( ctx ) =&gt; &#123;</span><br><span class="line">  ctx.body = &apos;hello world&apos;</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(3000, () =&gt; &#123;</span><br><span class="line">  console.log(&apos;[demo] static-use-middleware is starting at port 3000&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;搭建环境&quot;&gt;&lt;a href=&quot;#搭建环境&quot; class=&quot;headerlink&quot; title=&quot;搭建环境&quot;&gt;&lt;/a&gt;搭建环境&lt;/h2&gt;&lt;p&gt;新建一个文件夹如koa2文件夹&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd koa2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm init -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save koa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端学习" scheme="http://wutao.work/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="koa" scheme="http://wutao.work/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>nginx学习</title>
    <link href="http://wutao.work/2018/11/01/nginx/"/>
    <id>http://wutao.work/2018/11/01/nginx/</id>
    <published>2018-11-01T11:30:19.000Z</published>
    <updated>2018-11-07T07:28:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>购买阿里云ECS.我用的操作系统是CentOS 7.4 64位版本。然后建立远程链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@公网ip</span><br></pre></td></tr></table></figure></p><h3 id="用yum安装必要程序"><a href="#用yum安装必要程序" class="headerlink" title="用yum安装必要程序"></a>用yum安装必要程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ autoconf pcre-devel make automake</span><br><span class="line">yum -y install wget httpd-tools vim</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="建立目录"><a href="#建立目录" class="headerlink" title="建立目录"></a>建立目录</h3><p>1.在目录下建立一个文件夹例如wutao的文件夹。<br>2.进入wutao文件夹，命令行 cd wutao。<br>3.分别mkdir建立 app bacuup download logs work 文件夹</p><h3 id="基于Yum的方式安装Nginx"><a href="#基于Yum的方式安装Nginx" class="headerlink" title="基于Yum的方式安装Nginx"></a>基于Yum的方式安装Nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list | grep nginx</span><br></pre></td></tr></table></figure><p>这时候出现以下内容<img src="http://www.jspang.com/static/upload/20181007/ljnFrPYc23562AtUSLvSIYpQ.png" alt=""><br>这个源只支持1.1.12<br>在终端里输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure></p><p>将以下代码复制进去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centeros/7/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></p><p>按下ESC 然后:wq保存<br>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure></p><p>安装完成执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure></p><p>出现以下内容说明成功了<img src="http://www.jspang.com/static/upload/20181007/P6eXf6G5kJJ8L2mKDEZbHg1O.png" alt=""></p><h2 id="nginx配置说明"><a href="#nginx配置说明" class="headerlink" title="nginx配置说明"></a>nginx配置说明</h2><h3 id="nginx-conf文件解读"><a href="#nginx-conf文件解读" class="headerlink" title="nginx.conf文件解读"></a>nginx.conf文件解读</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx</span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#运行用户，默认即是nginx，可以不进行设置</span><br><span class="line">user  nginx;</span><br><span class="line">#Nginx进程，一般设置为和CPU核数一样</span><br><span class="line">worker_processes  1;   </span><br><span class="line">#错误日志存放目录</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">#进程pid存放位置</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024; # 单个后台进程的最大并发数</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;   #文件扩展名与类型映射表</span><br><span class="line">    default_type  application/octet-stream;  #默认文件类型</span><br><span class="line">    #设置日志模式</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    access_log  /var/log/nginx/access.log  main;   #nginx访问日志存放位置</span><br><span class="line">    sendfile        on;   #开启高效传输模式</span><br><span class="line">    #tcp_nopush     on;    #减少网络报文段的数量</span><br><span class="line">    keepalive_timeout  65;  #保持连接的时间，也叫超时时间</span><br><span class="line">    #gzip  on;  #开启gzip压缩</span><br><span class="line">    include /etc/nginx/conf.d/*.conf; #包含的子配置项位置和文件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="default-conf-配置项讲"><a href="#default-conf-配置项讲" class="headerlink" title="default.conf 配置项讲"></a>default.conf 配置项讲</h3><p>进入conf.d目录，然后使用vim default.conf进行查看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;   #配置监听端口</span><br><span class="line">    server_name  localhost;  //配置域名</span><br><span class="line">    #charset koi8-r;     </span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;     #服务默认启动目录</span><br><span class="line">        index  index.html index.htm;    #默认访问文件</span><br><span class="line">    &#125;</span><br><span class="line">    #error_page  404              /404.html;   # 配置404页面</span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;   #错误状态码的显示页面，配置后需要重启</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">    # concurs with nginx&apos;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们的服务目录放在了/usr/share/nginx/html下，可以使用命令进入看一下目录下的文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/nginx/html</span><br><span class="line">ls</span><br></pre></td></tr></table></figure></p><p>可以看到目录下面有两个文件，50x.html 和 index.html。我们可以使用vim进行编辑。</p><h3 id="阿里云的安全组配置"><a href="#阿里云的安全组配置" class="headerlink" title="阿里云的安全组配置"></a>阿里云的安全组配置</h3><p>进入阿里云控制台，并找到ECS实例。点击实例后边的“更多”点击“网络和安全组” ，再点击“安全组配置”右上角添加“安全组配置”进行80端口的设置，具体设置如图就好。<br><img src="http://jspang.com/static/upload/20181009/N3bF8FMGxljMydjEdTztVw7g.png" alt=""></p><h2 id="nginx服务的启动、停止、重启"><a href="#nginx服务的启动、停止、重启" class="headerlink" title="nginx服务的启动、停止、重启"></a>nginx服务的启动、停止、重启</h2><h3 id="nginx的启动"><a href="#nginx的启动" class="headerlink" title="nginx的启动"></a>nginx的启动</h3><p>在CentOS7.4版本里（低版本是不行的），是可以直接直接使用nginx启动服务的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure></p><p>使用systemctl命令启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure></p><p>查询服务的运行状况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep nginx</span><br></pre></td></tr></table></figure></p><h3 id="停止nginx"><a href="#停止nginx" class="headerlink" title="停止nginx"></a>停止nginx</h3><p>立刻停止<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx  -s stop</span><br></pre></td></tr></table></figure></p><p>从容停止服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s quit</span><br></pre></td></tr></table></figure></p><p>killall 方法杀死进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall nginx</span><br></pre></td></tr></table></figure></p><p>systemctl 停止<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop nginx.server</span><br></pre></td></tr></table></figure></p><h3 id="nginx重启"><a href="#nginx重启" class="headerlink" title="nginx重启"></a>nginx重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure><p>在重新编写或者修改Nginx的配置文件后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></p><h2 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h2><h3 id="多错误指向一个页面"><a href="#多错误指向一个页面" class="headerlink" title="多错误指向一个页面"></a>多错误指向一个页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd/etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><p>可以看到这句话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page   500 502 503 504  /50x.html;</span><br></pre></td></tr></table></figure></p><p>error_page指令用于自定义错误页面，500，502，503，504 这些就是HTTP中最常见的错误代码，/50.html 用于表示当发生上述指定的任意一个错误的时候，都是用网站根目录下的/50.html文件进行处理。</p><h3 id="单独为错误置顶处理方式"><a href="#单独为错误置顶处理方式" class="headerlink" title="单独为错误置顶处理方式"></a>单独为错误置顶处理方式</h3><p>新建一个404错误页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page 404  /404_error.html;</span><br></pre></td></tr></table></figure></p><p>然后到网站目录下新建一个404_error.html 文件，并写入一些信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;404页面没有找到!&lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="把错误码换成一个地址"><a href="#把错误码换成一个地址" class="headerlink" title="把错误码换成一个地址"></a>把错误码换成一个地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page  404 http://www.w3school.com.cn/;</span><br></pre></td></tr></table></figure><h3 id="简单实现访问控制"><a href="#简单实现访问控制" class="headerlink" title="简单实现访问控制"></a>简单实现访问控制</h3><p>可以直接在default.conf里进行配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> location / &#123;</span><br><span class="line">        deny   123.9.51.42;</span><br><span class="line">        allow  45.76.202.231;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="nginx访问权限"><a href="#nginx访问权限" class="headerlink" title="nginx访问权限"></a>nginx访问权限</h2><h3 id="指令优先级"><a href="#指令优先级" class="headerlink" title="指令优先级"></a>指令优先级</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> location / &#123;</span><br><span class="line">    allow  45.76.202.231;</span><br><span class="line">    deny   all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的配置表示只允许45.76.202.231进行访问，其他的IP是禁止访问的。但是如果我们把deny all指令，移动到 allow 45.76.202.231之前，会发现所有的IP都不允许访问了<br><strong>这说明了一个问题：就是在同一个块下的两个权限指令，先出现的设置会覆盖后出现的设置（也就是谁先触发，谁起作用)</strong></p><h3 id="复杂访问控制权限匹配"><a href="#复杂访问控制权限匹配" class="headerlink" title="复杂访问控制权限匹配"></a>复杂访问控制权限匹配</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location =/img&#123;</span><br><span class="line">        allow all;</span><br><span class="line">&#125;</span><br><span class="line">location =/admin&#123;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用正则表达式设置访问权限"><a href="#使用正则表达式设置访问权限" class="headerlink" title="使用正则表达式设置访问权限"></a>使用正则表达式设置访问权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~\.php$ &#123;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx设置虚拟主机"><a href="#Nginx设置虚拟主机" class="headerlink" title="Nginx设置虚拟主机"></a>Nginx设置虚拟主机</h2><h3 id="基于端口号配置虚拟主机"><a href="#基于端口号配置虚拟主机" class="headerlink" title="基于端口号配置虚拟主机"></a>基于端口号配置虚拟主机</h3><p>我们可以直接配置在主文件里etc/nginx/nginx.conf文件里， 也可以配置在子配置文件里etc/nginx/conf.d/default.conf,当然你也可以再新建一个文件，只要在conf.d文件夹下就可以了。<br>修改配置文件中的server选项，这时候就会有两个server。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 8001;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    root /usr/share/nginx/html/html8001;</span><br><span class="line">    index index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们就可以在浏览器中访问<a href="http://112.74.164.244:8001" target="_blank" rel="noopener">http://112.74.164.244:8001</a></p><h3 id="基于IP的虚拟主机"><a href="#基于IP的虚拟主机" class="headerlink" title="基于IP的虚拟主机"></a>基于IP的虚拟主机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 112.74.164.244;</span><br><span class="line">    root /usr/share/nginx/html/html8001;</span><br><span class="line">    index index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置以域名为划分的虚拟主机"><a href="#配置以域名为划分的虚拟主机" class="headerlink" title="配置以域名为划分的虚拟主机"></a>配置以域名为划分的虚拟主机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name nginx2.jspang.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /usr/share/nginx/html/html8001;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name wutao.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">            proxy_pass http://wutao.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般我们反向代理的都是一个IP<br>其它反向代理指令<br>proxy_set_header :在将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息。<br>proxy_connect_timeout:配置Nginx与后端代理服务器尝试建立连接的超时时间。<br>proxy_read_timeout : 配置Nginx向后端服务器组发出read请求后，等待相应的超时时间。<br>proxy_send_timeout：配置Nginx向后端服务器组发出write请求后，等待相应的超时时间。<br>proxy_redirect :用于修改后端服务器返回的响应头中的Location和Refresh。</p><h2 id="Nginx适配PC或移动设备"><a href="#Nginx适配PC或移动设备" class="headerlink" title="Nginx适配PC或移动设备"></a>Nginx适配PC或移动设备</h2><p>1.在/usr/share/nginx/目录下新建两个文件夹，分别为：pc和mobile目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/nginx</span><br><span class="line">mkdir pc</span><br><span class="line">mkdir mobile</span><br></pre></td></tr></table></figure></p><p>2.在pc和miblic目录下，新建两个index.html文件，文件里下面内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;I am pc!&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;I am mobile!&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p><p>3.进入etc/nginx 修改nginx.conf文件，改为下面的形式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name nginx2.jspang.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">    root /usr/share/nginx/pc;</span><br><span class="line">    if ($http_user_agent ~* &apos;(Android|webOS|iPhone|iPod|BlackBerry)&apos;) &#123;</span><br><span class="line">        root /usr/share/nginx/mobile;</span><br><span class="line">    &#125;</span><br><span class="line">    index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Nginx的Gzip压缩配置"><a href="#Nginx的Gzip压缩配置" class="headerlink" title="Nginx的Gzip压缩配置"></a>Nginx的Gzip压缩配置</h2><h3 id="gzip的配置项"><a href="#gzip的配置项" class="headerlink" title="gzip的配置项"></a>gzip的配置项</h3><p>gzip : 该指令用于开启或 关闭gzip模块。<br>gzip_buffers : 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。<br>gzip_comp_level : gzip压缩比，压缩级别是1-9，1的压缩级别最低，9的压缩级别最高。压缩级别越高压缩率越大，压缩时间越长。<br>gzip_disable : 可以通过该指令对一些特定的User-Agent不使用压缩功能。<br>gzip_min_length:设置允许压缩的页面最小字节数，页面字节数从相应消息头的Content-length中进行获取。<br>gzip_http_version：识别HTTP协议版本，其值可以是1.1.或1.0.<br>gzip_proxied : 用于设置启用或禁用从代理服务器上收到相应内容gzip压缩。<br>gzip_vary : 用于在响应消息头中添加Vary：Accept-Encoding,使代理服务器根据请求头中的Accept-Encoding识别是否启用gzip压缩。</p><h3 id="gzip最简单的配置"><a href="#gzip最简单的配置" class="headerlink" title="gzip最简单的配置"></a>gzip最简单的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">   .....</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_types text/plain application/javascript text/css;</span><br><span class="line">   .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看HTTP响应头信息。你可以清楚的看见Content-Encoding为gzip类型。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;购买阿里云ECS.我用的操作系统是CentOS 7.4 64位版本。然后建立远程链接&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh root@公网ip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;用yum安装必要程序&quot;&gt;&lt;a href=&quot;#用yum安装必要程序&quot; class=&quot;headerlink&quot; title=&quot;用yum安装必要程序&quot;&gt;&lt;/a&gt;用yum安装必要程序&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum -y install gcc gcc-c++ autoconf pcre-devel make automake&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum -y install wget httpd-tools vim&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端学习" scheme="http://wutao.work/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="nginx" scheme="http://wutao.work/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建</title>
    <link href="http://wutao.work/2018/10/29/first/"/>
    <id>http://wutao.work/2018/10/29/first/</id>
    <published>2018-10-29T14:07:20.000Z</published>
    <updated>2018-11-01T11:54:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>电脑安装好node和git，终端执行命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo</span><br></pre></td></tr></table></figure></p><p>接着在任意位置创建一个文件夹，如Blog，cd到该路径下执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>接下来是安装依赖包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>在浏览器输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以进行查看了。</p><h2 id="部署到gitHub"><a href="#部署到gitHub" class="headerlink" title="部署到gitHub"></a>部署到gitHub</h2><p>创建Github账号并新建项目<br>项目名称为用户名.github.io的固定写</p><p>编辑自己创建的本地博客文件夹中的_config.yml中的deploy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:username/username.github.io.git (我自己的git@github.com:Anne-Tao/Anne-Tao.github.io)</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>为了能够使Hexo部署到GitHub上，需要安装一个插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>修改完成之后保存退出，然后输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>本站选的是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a><br>在根目录下执行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p>将根目录下_config.yml里theme的名称landscape修改为next</p><h2 id="next主题优化"><a href="#next主题优化" class="headerlink" title="next主题优化"></a>next主题优化</h2><p>本站参考别人分享的<a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a>,写的非常好，省的自己折腾了</p><h2 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h2><p>在根目录下source目录下新建文件名为：<code>CNAME</code>文件，直接将自己的域名如:<code>wutao.work</code>写入<br>登录<a href="https://www.aliyun.com/?utm_content=se_1000301881" target="_blank" rel="noopener">阿里云账号</a>，在域名解析界面添加3条记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@          A             192.30.252.153</span><br><span class="line">@          A             192.30.252.154</span><br><span class="line">www      CNAME         username.github.io.</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo安装&quot;&gt;&lt;a href=&quot;#Hexo安装&quot; class=&quot;headerlink&quot; title=&quot;Hexo安装&quot;&gt;&lt;/a&gt;Hexo安装&lt;/h2&gt;&lt;p&gt;电脑安装好node和git，终端执行命令:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo npm install -g hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接着在任意位置创建一个文件夹，如Blog，cd到该路径下执行以下命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://wutao.work/categories/hexo/"/>
    
    
      <category term="hexo -" scheme="http://wutao.work/tags/hexo/"/>
    
  </entry>
  
</feed>
